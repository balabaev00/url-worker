/* eslint-disable camelcase */
import { CreateUrlWizard } from '@bot/wizards/create-url.wizard';
import { Command, Ctx, Message, Start, Update } from 'nestjs-telegraf';
import { UrlService } from 'src/modules/url/url.service';
import { Context } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';

@Update()
export class UrlBotUpdate {
    constructor(
        private readonly urlService: UrlService,
    ) { }

    @Start()
    async start(@Ctx() ctx: Context): Promise<void> {
        const message =
            // @todo –≤—ã–Ω–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ enum
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:' + '\n\n' +
            '/create - –ù–∞—á–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏' + '\n' +
            '/list - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫' + '\n' +
            '/get - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∫–æ–¥—É' + '\n' +
            '/delete - –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∫–æ–¥—É' + '\n' +
            '/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' + '\n\n' +
            '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ –µ—ë –≤—Ä—É—á–Ω—É—é. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! üöÄ';
        ;

        await ctx.reply(message, {
            reply_markup: {
                keyboard: [
                    // @todo command enum
                    [{ text: '/create' }, { text: '/list' }],
                    [{ text: '/get' }, { text: '/delete' }],
                ],
                resize_keyboard: true,
                one_time_keyboard: false,
            },
        });
    }

    @Command('save')
    save(@Ctx() ctx: SceneContext): void {
        ctx.scene.enter(CreateUrlWizard.name);
    }

    @Command('list')
    async findAll(@Ctx() ctx: Context): Promise<void> {
        const urls = await this.urlService.findAll();

        if (urls.length === 0) {
            await ctx.reply('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.');
            return;
        }

        let response = '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\n';
        urls.forEach((url, index) => {
            response += `${++index}) –ö–æ–¥: ${url.code}\n–°—Å—ã–ª–∫–∞: ${url.url} \n`;
        });

        await ctx.reply(response);
    }

    @Command('get')
    async findOneByCode(
        @Ctx() ctx: Context,
        @Message() msg: { text: string },
    ): Promise<void> {
        const [, code] = msg.text
            .trim()
            .split(' ')
            .filter(Boolean);

        if (!code) {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /get <–∫–æ–¥>');
            return;
        }

        const url = await this.urlService.findOneByCode(code);
        if (url) {
            await ctx.reply(`–°—Å—ã–ª–∫–∞: ${url.url} `);
        } else {
            await ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    }

    @Command('delete')
    async deleteOneByCode(
        @Ctx() ctx: Context,
        @Message() msg: { text: string },
    ): Promise<void> {
        const [, code] = msg.text
            .trim()
            .split(' ')
            .filter(Boolean);

        if (!code) {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete <–∫–æ–¥>');
            return;
        }

        const userId = ctx.from!.id;
        const isDeleted = await this.urlService.deleteOneByCodeAndUserId(code, userId);
        if (isDeleted) {
            await ctx.reply('–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.');
        } else {
            await ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    }
}
